---
import Layout from "@layouts/Layout.astro";
import { getEntries } from "astro:content";
import { getEntry } from "astro:content";
import { getCollection, render } from "astro:content";
import { formatDate } from "src/helper";
import LinkPersonne from "@components/LinkPersonne.astro";

export async function getStaticPaths() {
  const films = await getCollection("films");
  return films.map((film) => ({
    params: { id: film.id },
    props: { film },
  }));
}

const { film } = Astro.props;
const { Content } = await render(film);

const realisateur =
  film.data.realisateur && (await getEntry(film.data.realisateur));

const scenaristes =
  film.data.scenaristes && (await getEntries(film.data.scenaristes));

const roles =
  film.data.roles &&
  (await Promise.all(
    film.data.roles.map(async (r) => ({
      personnage: r.personnage,
      acteur: await getEntry(r.acteur),
    }))
  ));
---

<Layout pageTitle={`Fiche de ${film.data.titre}`}>
  <div class="max-w-2xl mx-auto bg-white shadow-lg rounded-lg p-6">
    <h1 class="text-2xl font-bold text-gray-900">{film.data.titre}</h1>
    <p class="text-gray-700 mt-2">
      Date de sortie : <span class="font-semibold"
        >{formatDate(film.data.dateSortie)}</span
      >
    </p>
    <p class="text-gray-700">
      Synopsis : <span class="font-semibold">{film.data.synopsis}</span>
    </p>
    <p class="text-gray-700">
      Langue : <span class="font-semibold">{film.data.langue}</span>
    </p>
    <p class="text-gray-700">
      Durée : <span class="font-semibold">{film.data.duree}</span>
    </p>
    {
      realisateur && (
        <p>
          Réalisateur :{" "}
          <span class="font-semibold">{realisateur.data.nom}</span>
          <LinkPersonne personne={realisateur} />
        </p>
      )
    }
    {
      scenaristes && (
        <p>
          Scénariste{scenaristes.length > 1 && <>s</>} :
          <span class="font-semibold">
            {scenaristes
              .map((s) => s.data.nom)
              .join(", ")
              .replace(/,([^,]*)$/, " et $1")}
          </span>
        </p>
      )
    }
    {
      roles && (
        <>
          <h2>Acteurs</h2>
          <ul>
            {roles.map(({ personnage, acteur }) => (
              <li>
                <strong>{personnage}</strong> interprété par :{" "}
                <strong>
                  {acteur && (
                    <>
                      {" "}
                      <a href={`/personne/${acteur.id}`}>
                        {acteur.data.nom}
                      </a>{" "}
                    </>
                  )}
                </strong>
                <LinkPersonne personne={acteur} />
              </li>
            ))}
          </ul>
        </>
      )
    }
    <div class="mt-4">
      <Content />
    </div>
  </div>
</Layout>
